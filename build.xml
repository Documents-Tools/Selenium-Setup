<?xml version="1.0" encoding="UTF-8"?>

<project name="phpunit-selenium-env" default="envSetup">
    <resolvepath propertyName="project.path" file="." />
    <target name="envSetup">

        <!-- Boilerplate -->
        <echo>
          ____            ___
         /\  _`\         /\_ \                  __
         \ \,\L\_\     __\//\ \      __    ___ /\_\  __  __    ___ ___
          \/_\__ \   /'__`\\ \ \   /'__`\/' _ `\/\ \/\ \/\ \ /' __` __`\
            /\ \L\ \/\  __/ \_\ \_/\  __//\ \/\ \ \ \ \ \_\ \/\ \/\ \/\ \
            \ `\____\ \____\/\____\ \____\ \_\ \_\ \_\ \____/\ \_\ \_\ \_\
            \/_____/\/____/\/____/\/____/\/_/\/_/\/_/\/___/  \/_/\/_/\/_/
            PHPUnit Environment with Facebook's WebDriver
            by Bogdan Anton and contributors.
        </echo>
        
        <!-- Create the binaries main folder -->
        <property name="build.path" value="${application.startdir}/build" />
        <mkdir dir="${build.path}" />
        <echo>[x] "build" folder is ${build.path}</echo>
        
        <!-- 
        Define all working versions.
        Change these values when needed.
        -->
        <property name="composer.VERSION" value="latest" />
        <property name="composer.URL" value="https://getcomposer.org/composer.phar" />
        <property name="composer.EXISTS" value="false"/>
        <available property="composer.EXISTS" file="${build.path}/composer.phar" type="file" />
        <available property="composer.vendor.EXISTS" file="vendor" type="dir" />
        
        <property name="selenium.VERSION" value="2.48.2" />
        <property name="selenium.URL" value="http://selenium-release.storage.googleapis.com/2.48/selenium-server-standalone-2.48.2.jar" />
        <property name="selenium.EXISTS" value="false"/>
        <available property="selenium.EXISTS" file="${build.path}/selenium-server.jar" type="file" />
        
        <property name="phpunit.old.VERSION" value="4.8.9" />
        <property name="phpunit.old.URL" value="https://phar.phpunit.de/phpunit-4.8.9.phar" />
        <property name="phpunit.old.EXISTS" value="false"/>
        <available property="phpunit.old.EXISTS" file="${build.path}/phpunit-old.phar" type="file" />
        
        <property name="phpunit.new.VERSION" value="5.0.8" />
        <property name="phpunit.new.URL" value="https://phar.phpunit.de/phpunit-5.0.8.phar" />
        <property name="phpunit.new.EXISTS" value="false"/>
        <available property="phpunit.new.EXISTS" file="${build.path}/phpunit-new.phar" type="file" />
        
        <property name="chromedriver.mac.VERSION" value="2.20" />
        <property name="chromerdriver.mac.URL" value="http://chromedriver.storage.googleapis.com/2.20/chromedriver_mac32.zip" />
        <property name="chromerdriver.mac.EXISTS" value="false"/>
        <available property="chromerdriver.mac.EXISTS" file="${build.path}/chromedriver" type="file" />

        <property name="chromedriver.linux.VERSION" value="2.20" />
        <property name="chromerdriver.linux.URL" value="http://chromedriver.storage.googleapis.com/2.20/chromedriver_linux64.zip" />
        <property name="chromerdriver.linux.EXISTS" value="false"/>
        <available property="chromerdriver.linux.EXISTS" file="${build.path}/chromedriver" type="file" />

        <property name="chromedriver.windows.VERSION" value="2.20" />
        <property name="chromerdriver.windows.URL" value="http://chromedriver.storage.googleapis.com/2.20/chromedriver_win32.zip" />
        <property name="chromerdriver.windows.EXISTS" value="false"/>
        <available property="chromerdriver.windows.EXISTS" file="${build.path}/chromedriver.exe" type="file" />
        
        <property name="iedriver.VERSION" value="2.48" />
        <property name="iedriver.URL" value="http://selenium-release.storage.googleapis.com/2.48/IEDriverServer_Win32_2.48.0.zip" />
        <property name="iedriver.EXISTS" value="false"/>
        <available property="iedriver.EXISTS" file="${build.path}/IEDriverServer.exe" type="file" />

        <!-- 
        Determine current machine binaries versions and status.
        -->
        <!-- Scan Java version-->
        <exec level="debug" command="java -version" outputProperty="javaVersionParagraph" />
        <php level="debug" expression="substr('${javaVersionParagraph}', 14, 5)" returnProperty="javaVersion" />
        <php level="debug" expression="version_compare('${javaVersion}', '1.6') >= 0" returnProperty="javaVersionCheck" />
        <php level="debug" expression="version_compare('${javaVersion}', '0.1') >= 0" returnProperty="javaInstalled" />

        <!-- Scan PHP version -->
        <php level="debug" expression="version_compare(PHP_VERSION, '5.3') >= 0" returnProperty="phpVersionCheck" />

        <!-- Detect if we can use the latest phpunit version -->
        <php level="debug" expression="version_compare(PHP_VERSION, '5.6') >= 0" returnProperty="canUseLatestPHPUnit" />

        <!-- Scan PHP cURL -->
        <php level="debug" expression="function_exists('curl_version')" returnProperty="cURLEnabled" />
        <php level="debug" expression="curl_version()['version']" returnProperty="cURLVersion" />

        <!-- Scan PHP OpenSSL extension -->
        <php level="debug" expression="extension_loaded('openssl')" returnProperty="openSSLEnabled" />

        <property name="canInstall" value="true" />

        <if>
            <equals arg1="${javaVersionCheck}" arg2="true" />
            <then>
                <echo>[x] Java version ${javaVersion}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <if>
                    <equals arg1="${javaInstalled}" arg2="false" />
                    <then>
                        <warn level="error" message="[ ] Java is not installed or accessible." />
                    </then>
                    <else>
                        <warn level="error" message="[ ] Java version ${javaVersion} should be at least 1.6" />
                    </else>
                </if>
            </else>
        </if>

        <if>
            <equals arg1="${phpVersionCheck}" arg2="true" />
            <then>
                <echo>[x] PHP version ${php.version}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP version ${php.version} should be at least 5.3" />
            </else>
        </if>

        <if>
            <equals arg1="${cURLEnabled}" arg2="true" />
            <then>
                <echo>[x] PHP cURL version ${cURLVersion}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP cURL not enabled" />
            </else>
        </if>

        <if>
            <equals arg1="${openSSLEnabled}" arg2="true" />
            <then>
                <echo>[x] PHP OpenSSL enabled</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP OpenSSL not enabled" />
            </else>
        </if>

        <!-- Composer -->
        <if>
            <equals arg1="${composer.EXISTS}" arg2="true" />
            <then>
                <echo>[x] Composer found.</echo>
            </then>
            <else>
                <exec command="curl ${composer.URL} -o ${build.path}/composer.phar" level="debug" passthru="true" escape="true" checkreturn="true" />
                <echo>[x] Composer downloaded.</echo>
            </else>
        </if>
        <if>
            <equals arg1="${composer.vendor.EXISTS}" arg2="true" />
            <then>
                <echo>[x] "vendor" folder found.</echo>
                <composer command="update" composer="${build.path}/composer.phar" />
                <echo>[x] "vendor" folder updated.</echo>
            </then>
            <else>
                <composer command="install" composer="${build.path}/composer.phar" />
                <echo>[x] "vendor" folder created.</echo>
            </else>
        </if>

        <!-- PHPUnit -->
        <if>
            <equals arg1="${phpunit.old.EXISTS}" arg2="true" />
            <then>
                <echo>[x] PHPUnit found.</echo>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${canUseLatestPHPUnit}" arg2="true" />
                <isfalse value="${phpunit.new.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${phpunit.new.URL} -o ${build.path}/phpunit.phar" />
                <echo>[x] Downloaded PHPUnit.</echo>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${canUseLatestPHPUnit}" arg2="false" />
                <isfalse value="${phpunit.old.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${phpunit.old.URL} -o ${build.path}/phpunit-old.phar" />
                <echo>[x] Downloaded PHPUnit (old).</echo>
            </then>
        </if>
        
        <!-- Selenium Server -->
        <if>
            <equals arg1="${selenium.EXISTS}" arg2="true" />
            <then>
                <echo>[x] Selenium Standalone Server found.</echo>
            </then>
            <else>
                <exec command="curl ${selenium.URL} -o ${build.path}/selenium-server.jar" />
                <echo>[x] Selenium Standalone Server downloaded.</echo>
            </else>
        </if>
        
        <!-- Chrome WebDriver -->
        <if>
            <and>
                <os family="mac" />
                <isfalse value="${chromerdriver.mac.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${chromerdriver.mac.URL} -o ${build.path}/chromedriver.zip"/>
                <unzip file="chromedriver.zip" todir="./" />
                <delete file="chromedriver.zip" verbose="false" />
                <exec command="chmod +x chromedriver" />
                <echo>[x] Downloaded Chrome Driver for Mac to current path. Might want to move it to /usr/bin.</echo>
            </then>
        </if>
        <if>
            <and>
                <os family="unix" />
                <isfalse value="${chromerdriver.linux.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${chromerdriver.linux.URL} -o ${build.path}/chromedriver.zip" />
                <unzip file="chromedriver.zip" todir="./" />
                <delete file="chromedriver.zip" verbose="false" />
                <exec command="chmod +x chromedriver" />
                <echo>[x] Downloaded Chrome Driver for Unix to current path. Might want to move ut to /usr/bin.</echo>
            </then>
        </if>
        <if>
            <and>
                <os family="windows" />
                <isfalse value="${chromerdriver.windows.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${chromerdriver.windows.URL} -o ${build.path}/chromedriver.zip" />
                <unzip file="${build.path}/chromedriver.zip" todir="${build.path}" />
                <delete file="${build.path}/chromedriver.zip" verbose="true" />
                <echo>[x] Downloaded Chrome Driver for Windows to current path. Might want to include it in the PATH.</echo>
            </then>
        </if>

        <!-- IE WebDriver (only for Windows) -->
        <if>
            <and>
                <os family="windows"/>
                <istrue value="${iedriver.EXISTS}" />
            </and>
            <then>
                <echo>[x] IEDriver found.</echo>
            </then>
        </if>
        <if>
            <and>
                <os family="windows"/>
                <isfalse value="${iedriver.EXISTS}" />
            </and>
            <then>
                <exec command="curl ${iedriver.URL} -o ${build.path}/iedriver.zip" />
                <unzip file="${build.path}/iedriver.zip" todir="${build.path}" />
                <delete file="${build.path}/iedriver.zip" verbose="false" />
                <echo>[x] Downloaded IE Driver for Windows to current path. Might want to include it in the PATH.</echo>
            </then>
        </if>

        <echo>Testing Selenium Server by running `java -jar selenium-server.jar`.</echo>
        <echo>You can kill this process whenever you want.</echo>

        <exec command="java -jar ${build.path}/selenium-server.jar" passthru="true" escape="true" checkreturn="true" />
    </target>
</project>
