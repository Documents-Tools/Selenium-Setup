<?xml version="1.0" encoding="UTF-8"?>

<project name="Check environment" default="main">
    <target name="main">
        <!-- Scan Java version-->
        <exec level="debug" command="java -version" outputProperty="javaVersionParagraph" />
        <php level="debug" expression="substr('${javaVersionParagraph}', 14, 5)" returnProperty="javaVersion" />
        <php level="debug" expression="version_compare('${javaVersion}', '1.6') >= 0" returnProperty="javaVersionCheck" />
        <php level="debug" expression="version_compare('${javaVersion}', '0.1') >= 0" returnProperty="javaInstalled" />

        <!-- Scan PHP version -->
        <php level="debug" expression="version_compare(PHP_VERSION, '5.3') >= 0" returnProperty="phpversioncheck" />

        <!-- Scan PHP cURL -->
        <php level="debug" expression="function_exists('curl_version')" returnProperty="cURLEnabled" />
        <php level="debug" expression="curl_version()['version']" returnProperty="cURLVersion" />

        <!-- Scan PHP OpenSSL extension -->
        <php level="debug" expression="extension_loaded('openssl')" returnProperty="openSSLEnabled" />

        <property name="canInstall" value="true" />

        <if>
            <equals arg1="${javaVersionCheck}" arg2="true" />
            <then>
                <echo>[x] Java version ${javaVersion}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <if>
                    <equals arg1="${javaInstalled}" arg2="false" />
                    <then>
                        <warn level="error" message="[ ] Java is not installed or accessible." />
                    </then>
                    <else>
                        <warn level="error" message="[ ] Java version ${javaVersion} should be at least 1.6" />
                    </else>
                </if>
            </else>
        </if>

        <if>
            <equals arg1="${phpversioncheck}" arg2="true" />
            <then>
                <echo>[x] PHP version ${php.version}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP version ${php.version} should be at least 5.3" />
            </else>
        </if>

        <if>
            <equals arg1="${cURLEnabled}" arg2="true" />
            <then>
                <echo>[x] PHP cURL version ${cURLVersion}</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP cURL not enabled" />
            </else>
        </if>

        <if>
            <equals arg1="${openSSLEnabled}" arg2="true" />
            <then>
                <echo>[x] PHP OpenSSL enabled</echo>
            </then>
            <else>
                <property name="canInstall" value="false" />
                <warn level="error" message="[ ] PHP OpenSSL not enabled" />
            </else>
        </if>

        <property name="composer.IS_FILE_EXISTS" value="false" />
        <exec command="if [ -f 'composer.phar' ]; then echo 'true'; else echo 'false'; fi;" outputProperty="composer.IS_FILE_EXISTS" />
        <if>
            <equals arg1="${composer.IS_FILE_EXISTS}" arg2="true" />
            <then>
                <echo>[x] Composer found</echo>
            </then>
            <else>
                <exec command="curl https://getcomposer.org/composer.phar -O" />
                <echo>[x] Composer downloaded to 'composer.phar' file</echo>
            </else>
        </if>

        <property name="composer.vendor.IS_DIR_EXISTS" value="false" />
        <exec command="if [ -d 'vendor' ]; then echo 'true'; else echo 'false'; fi;" outputProperty="composer.vendor.IS_DIR_EXISTS" />
        <if>
            <equals arg1="${composer.vendor.IS_DIR_EXISTS}" arg2="true" />
            <then>
                <echo>[x] "vendor" folder found</echo>
            </then>
            <else>
                <composer command="install" />
            </else>
        </if>

        <property name="phpunit.IS_FILE_EXISTS" value="false" />
        <exec command="if [ -f 'phpunit.phar' ]; then echo 'true'; else echo 'false'; fi;" outputProperty="phpunit.IS_FILE_EXISTS" />
        <if>
            <equals arg1="${phpunit.IS_FILE_EXISTS}" arg2="true" />
            <then>
                <echo>[x] PHPUnit found</echo>
            </then>
            <else>
                <exec command="curl https://phar.phpunit.de/phpunit.phar -O" />
                <echo>[x] Downloaded PHPUnit to 'phpunit.phar' file</echo>
            </else>
        </if>

        <property name="selenium.IS_FILE_EXISTS" value="false" />
        <exec command="if [ -f 'selenium-server-standalone-2.47.0.jar' ]; then echo 'true'; else echo 'false'; fi;" outputProperty="selenium.IS_FILE_EXISTS" />
        <if>
            <equals arg1="${selenium.IS_FILE_EXISTS}" arg2="true" />
            <then>
                <echo>[x] Selenium Standalone Server found</echo>
            </then>
            <else>
                <exec command="curl http://selenium-release.storage.googleapis.com/2.47/selenium-server-standalone-2.47.0.jar -O" />
                <echo>[x] Selenium Standalone Server downloaded to 'selenium-server-standalone-2.47.0.jar' file</echo>
            </else>
        </if>

        <if>
            <os family="Unix"/>
            <then>
                <exec command="curl http://chromedriver.storage.googleapis.com/2.18/chromedriver_linux64.zip -O" />
                <unzip file="chromedriver_linux64.zip" todir="./" />
                <delete file="chromedriver_linux64.zip" verbose="false" />
                <exec command="chmod +x chromedriver" />
                <echo>[x] Downloaded chromedriver to current path. Move to /usr/bin</echo>
            </then>
            <else>
                <exec command="curl http://chromedriver.storage.googleapis.com/2.18/chromedriver_win32.zip -O" />
                <unzip file="chromedriver_win32.zip" todir="./" />
                <delete file="chromedriver_win32.zip" verbose="false" />
                <echo>[x] Downloaded chromedriver to current path. Move to c:/Windows or somewhere in the PATH.</echo>
            </else>
        </if>

        <echo>Run 'java -jar selenium-server-standalone-2.47.0.jar' in a different terminal to start the server, then run `php phpunit.phar` in this terminal.</echo>
        <!--<exec passthru="true" escape="true" checkreturn="true" command="java -jar selenium-server-standalone-2.47.0.jar"></exec>-->
    </target>
</project>
